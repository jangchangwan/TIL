# 2022 KAKAO BLIND RECRUITMENT 파괴되지 않는 건물
# 2022-05-14

# 단순한 이차원 배열 탐색
# 정확성 성공 / 효율성 실패

def solution(board, skill):
    answer = 0
    for s in skill:
        # 공격
        if s[0] == 1:
            for i in range(s[1], s[3]+1):
                for j in range(s[2], s[4]+1):
                    board[i][j] -= s[5]
        # 회복
        elif s[0] == 2:
            for i in range(s[1], s[3] + 1):
                for j in range(s[2], s[4] + 1):
                    board[i][j] += s[5]

    for b in board:
        for i in b:
            if i > 0:
                answer += 1

    return answer


print(solution([[5,5,5,5,5],[5,5,5,5,5],[5,5,5,5,5],[5,5,5,5,5]],
               [[1,0,0,3,4,4],[1,2,0,2,3,2],[2,1,0,3,1,2],[1,0,1,3,3,1]]))

print(solution([[1,2,3],[4,5,6],[7,8,9]],
               [[1,1,1,2,2,4],[1,0,0,1,1,2],[2,2,0,2,0,100]]))



'''
---------------------------------------
출력 예시
10
6

---------------------------------------
정확성 테스트
테스트 1 〉	통과 (0.01ms, 9.95MB)
테스트 2 〉	통과 (0.06ms, 10.2MB)
테스트 3 〉	통과 (0.27ms, 10.2MB)
테스트 4 〉	통과 (1.16ms, 10.4MB)
테스트 5 〉	통과 (0.89ms, 10.4MB)
테스트 6 〉	통과 (3.14ms, 10.3MB)
테스트 7 〉	통과 (5.87ms, 10.1MB)
테스트 8 〉	통과 (9.16ms, 10.3MB)
테스트 9 〉	통과 (12.47ms, 10.3MB)
테스트 10 〉	통과 (25.08ms, 10.3MB)

효율성  테스트
테스트 1 〉	실패 (시간 초과)
테스트 2 〉	실패 (시간 초과)
테스트 3 〉	실패 (시간 초과)
테스트 4 〉	실패 (시간 초과)
테스트 5 〉	실패 (시간 초과)
테스트 6 〉	실패 (시간 초과)
테스트 7 〉	실패 (시간 초과)
'''