import heapq


def solution(food_times, k):
    # 총음식을 다먹는시간이 저장하는시간
    if sum(food_times) <= k:
        return -1

    # 우선순위큐(최소힙)에다가 삽입
    # 음식 번호와 시간을 튜플형태로 삽입, 시간을 기준으로 최소힙 완성됨
    q = []
    for i in range(len(food_times)):
        heapq.heappush(q, (food_times[i], i + 1))

    foods = len(food_times)  # 남은 음식의 개수
    previous = 0  # 이전 음식을 먹는데 걸리는 시간
    while True:
        # 남은 음식의 개수 * 음식을 먹는 시간 = 이 음식을 다 먹을 때까지 걸리는 시간
        now = q[0][0]  # 여기서 pop을 하면 q에 아무것도 안남아서 마지막에 정렬이 안됨
        t = foods * (now - previous)  # 한 음식을 다 먹어서 빼면 튜플에 남아있는 음식을 먹기위해 걸리는 시간이 줄어들어야함
        if k >= t:
            k -= t
            foods -= 1
            previous = heapq.heappop(q)[0]  # now와 같은 값이지만 여기서 pop을 함
        else:
            i = k % foods
            q.sort(key=lambda x: x[1])  # 음식 번호로 정렬
            return q[i][1]


'''
테스트 1 〉	통과 (0.01ms, 10.4MB)
테스트 2 〉	통과 (0.04ms, 10.4MB)
테스트 3 〉	통과 (0.01ms, 10.1MB)
테스트 4 〉	통과 (0.04ms, 10.2MB)
테스트 5 〉	통과 (0.04ms, 10.3MB)
테스트 6 〉	통과 (0.02ms, 10.3MB)
테스트 7 〉	통과 (0.01ms, 10.3MB)
테스트 8 〉	통과 (0.01ms, 10.2MB)
테스트 9 〉	통과 (0.02ms, 10.2MB)
테스트 10 〉	통과 (0.02ms, 10.2MB)
테스트 11 〉	통과 (0.02ms, 10.2MB)
테스트 12 〉	통과 (0.02ms, 10.3MB)
테스트 13 〉	통과 (0.02ms, 10.1MB)
테스트 14 〉	통과 (0.01ms, 10.2MB)
테스트 15 〉	통과 (0.02ms, 10.4MB)
테스트 16 〉	통과 (0.00ms, 10.2MB)
테스트 17 〉	통과 (0.02ms, 10.2MB)
테스트 18 〉	통과 (0.02ms, 10.2MB)
테스트 19 〉	통과 (0.00ms, 10.1MB)
테스트 20 〉	통과 (0.00ms, 10.3MB)
테스트 21 〉	통과 (0.09ms, 10.2MB)
테스트 22 〉	통과 (0.10ms, 10.2MB)
테스트 23 〉	통과 (0.00ms, 10.3MB)
테스트 24 〉	통과 (0.69ms, 10.3MB)
테스트 25 〉	통과 (0.81ms, 10.3MB)
테스트 26 〉	통과 (1.28ms, 10.4MB)
테스트 27 〉	통과 (1.04ms, 10.4MB)
테스트 28 〉	통과 (0.02ms, 10.4MB)
테스트 29 〉	통과 (0.01ms, 10.2MB)
테스트 30 〉	통과 (0.01ms, 10.2MB)
테스트 31 〉	통과 (0.01ms, 10.3MB)
테스트 32 〉	통과 (0.02ms, 10.2MB)
효율성  테스트
테스트 1 〉	통과 (236.38ms, 41.3MB)
테스트 2 〉	통과 (76.99ms, 40.8MB)
테스트 3 〉	통과 (316.03ms, 39.2MB)
테스트 4 〉	통과 (292.33ms, 39.3MB)
테스트 5 〉	통과 (225.71ms, 41.3MB)
테스트 6 〉	통과 (199.32ms, 41.5MB)
테스트 7 〉	통과 (231.97ms, 41.4MB)
테스트 8 〉	통과 (150.20ms, 42.1MB)
'''